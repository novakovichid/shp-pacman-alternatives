Title,Body
Шаблоны повторяющихся задач,"**Описание.** Добавить поддержку ежедневных и еженедельных повторений. **Шаги реализации:** - Расширить модель `Task` полем `recurrence` с перечислением (`none`, `daily`, `weekly`). - При завершении повторяющейся задачи автоматически создавать копию со смещённым дедлайном. - Зафиксировать поведение в сервисе и логировать событие. **Результат.** Завершение повторяющейся задачи приводит к появлению следующей копии."
Массовые операции,**Описание.** Упростить работу с большим числом задач. **Шаги реализации:** - Добавить в CLI команду `bulk complete <tag>` для массового завершения задач с тегом. - Реализовать аналогичную команду `bulk delete <tag>`. - Отражать количество обработанных задач в ответе и логах. **Результат.** Пользователь может завершать или удалять целые группы задач одной командой.
Планировщик напоминаний,"**Описание.** Встроить напоминания о предстоящих дедлайнах. **Шаги реализации:** - Создать сервис напоминаний, который анализирует задачи при запуске приложения. - Печатать предупреждения о задачах, срок которых наступает сегодня или просрочен. - Добавить логирование предупреждений. **Результат.** После запуска пользователь видит сводку срочных задач."
Команда `stats`,"**Описание.** Выводить агрегированные показатели. **Шаги реализации:** - Рассчитывать общее количество задач, выполненных, просроченных, активных. - Печатать статистику в табличном виде. - Добавить сохранение статистики в файл `reports/stats.txt` при каждом вызове. **Результат.** Пользователь получает понятную сводку состояния трекера."
История изменений задач,"**Описание.** Отслеживать изменения полей задачи. **Шаги реализации:** - Добавить в модель `Task` журнал изменений (список событий). - Обновлять журнал при редактировании, завершении, удалении. - Ввести команду `history <title>` для просмотра последних событий. **Результат.** Пользователь может посмотреть, кто и когда изменял задачу."
Поддержка приоритетов,"**Описание.** Добавить уровни приоритета задач. **Шаги реализации:** - Дополнить модель `Task` полем `priority` (например, `low`, `medium`, `high`). - Обновить команды добавления и редактирования для работы с приоритетом. - Реализовать сортировку списка задач по приоритету и дедлайну. **Результат.** Команда `list` выводит задачи, упорядоченные по приоритету."
Шаблоны экспорта отчётов,"**Описание.** Сделать отчёты более информативными. **Шаги реализации:** - Создать шаблоны в каталоге `templates/` с использованием `str.format`. - Генерировать отчёты на основе шаблонов, подставляя данные задач. - Поддержать возможность локализации дат (русский/английский формат) через настройки. **Результат.** Отчёты формируются по единообразным шаблонам и легко изменяются."
Режим чтения только для просмотра,"**Описание.** Позволить запускать приложение без возможности записи. **Шаги реализации:** - Добавить аргумент командной строки `--read-only`. - В сервисном слое блокировать операции, изменяющие данные, и выдавать предупреждение. - Запрещать сохранение в CSV и создание отчётов при активном режиме. **Результат.** Пользователь может просматривать задачи без риска изменить данные."
Дополнительные форматы экспорта,**Описание.** Поддержать выгрузку задач в JSON. **Шаги реализации:** - Добавить модуль экспорта в `storage/` с использованием стандартного `json`. - Реализовать команду `export json <path>`. - Обновить README ссылкой на документацию `json`. **Результат.** Пользователь может получить копию задач в формате JSON.
Импорт из JSON,**Описание.** Поддержать импорт задач из JSON-файла. **Шаги реализации:** - Реализовать парсер JSON с валидацией обязательных полей. - Добавить команду `import json <path>`. - Поддержать объединение данных с существующими задачами. **Результат.** Приложение корректно загружает задачи из JSON и объединяет их с текущими данными.
Расширенный поиск,"**Описание.** Сделать поиск гибче. **Шаги реализации:** - Добавить поддержку логических операторов `AND`, `OR` в запросах. - Реализовать поиск по нескольким полям с использованием простого парсера. - Добавить опцию `--case-sensitive`. **Результат.** Команда `search` принимает сложные запросы и корректно фильтрует задачи."
Автосохранение,"**Описание.** Минимизировать риск потери данных. **Шаги реализации:** - Настроить автоматическое сохранение после каждой операции изменения. - Добавить периодическое сохранение (например, каждые 5 минут) с помощью фонового таймера. - Продумать корректное завершение таймера при выходе из приложения. **Результат.** Данные не теряются при неожиданном завершении работы."
Настройки пользователя,"**Описание.** Разрешить хранить пользовательские настройки в отдельном файле. **Шаги реализации:** - Создать файл `config/user_settings.json` с параметрами (формат даты, язык, поведение отчётов). - При запуске приложения читать файл и применять настройки. - Добавить команду `settings` для интерактивного изменения параметров. **Результат.** Пользователь может кастомизировать приложение без изменения кода."
Резервное копирование,**Описание.** Сохранять резервные копии CSV и JSON перед изменениями. **Шаги реализации:** - Перед записью в файл создавать копию с суффиксом времени в каталоге `backups/`. - Добавить команду `backup restore <timestamp>` для отката. - Логировать все операции резервного копирования. **Результат.** Пользователь может восстановить состояние задач из резервной копии.
Нагрузочное тестирование,"**Описание.** Проверить стабильность на больших данных. **Шаги реализации:** - Добавить скрипт генерации тестовых задач (например, 10 000 записей) в каталог `tools/`. - Измерить время загрузки, сохранения, фильтрации и зафиксировать результаты. - Обновить документацию с рекомендациями по оптимизации, если потребуются изменения. **Результат.** Команда получает отчёт о производительности и понимание узких мест."
