Title,Body
Подготовка служебных каталогов,"**Описание.** Обеспечить автоматическое создание каталогов `data/`, `logs/`, `reports/` при запуске приложения. **Шаги реализации:** - Дополнить `Settings` путями к каталогам и файлам. - В `ConsoleApplication` добавить инициализацию директорий перед запуском CLI. - Использовать `Path.mkdir(parents=True, exist_ok=True)`. **Результат.** После запуска `python main.py` в проекте появляются пустые каталоги и файлы, ошибки отсутствуют."
Расширение модели задачи,"**Описание.** Модель `Task` должна описывать основные атрибуты задачи. **Шаги реализации:** - Добавить поля `description`, `deadline`, `completed`, `tags` с подходящими типами. - Реализовать методы для отметки выполнения и возврата в активные задачи. - Добавить метод обновления описания и дедлайна. **Результат.** Объекты `Task` поддерживают изменение статуса и содержат полный набор данных."
Реализация базового трекера,"**Описание.** Класс `TaskTracker` должен управлять коллекцией задач. **Шаги реализации:** - Реализовать хранение задач во внутреннем списке. - Добавить методы `add_task`, `all_tasks`, `find_by_title`. - Методы должны возвращать копии данных, не ссылку на оригинальный список. **Результат.** Трекер позволяет добавлять и искать задачи в памяти без побочных эффектов."
Загрузка стартового набора задач,**Описание.** Организовать импорт существующих задач из хранилища в трекер. **Шаги реализации:** - Реализовать метод `load_initial` в `TaskTracker`. - Метод принимает iterable задач и добавляет их через `add_task`. - Добавить вызов загрузки в сервисном слое после чтения CSV. **Результат.** При запуске приложения задачи из CSV появляются в памяти.
Простейший консольный цикл,"**Описание.** Организовать цикл чтения команд пользователя. **Шаги реализации:** - В `CommandLoop` добавить метод `run`, который читает ввод с помощью `input()`. - Игнорировать пустые строки и лишние пробелы. - Добавить команду `help`, печатающую список доступных команд. **Результат.** Пользователь видит приглашение и может вызвать `help` без ошибок."
Команда выхода,**Описание.** Реализовать команду завершения приложения. **Шаги реализации:** - Добавить обработку команды `exit` в цикле. - Перед выходом печатать прощальное сообщение. - Обеспечить корректное завершение без `KeyboardInterrupt`. **Результат.** После ввода `exit` приложение завершает работу и возвращает управление консоли.
Создание задач через CLI,"**Описание.** Пользователь должен добавлять задачи по шагам. **Шаги реализации:** - В `CommandLoop` добавить команду `add` с последовательным вводом полей. - Валидировать, что заголовок не пустой. - Передавать собранные данные в `TaskService.create_task`. **Результат.** После ввода команды `add` новая задача появляется в памяти и отображается в списке."
Вывод списка задач,"**Описание.** Реализовать команду `list` для просмотра задач. **Шаги реализации:** - В сервисе добавить метод, возвращающий актуальные задачи. - В CLI отформатировать вывод: индекс, статус, заголовок, дедлайн, теги. - Добавить человекочитаемый формат даты `YYYY-MM-DD`. **Результат.** Команда `list` печатает табличный список задач."
Сохранение в CSV,**Описание.** Реализовать запись задач в файл `data/tasks.csv`. **Шаги реализации:** - В `CsvTaskRepository.save` записывать заголовок CSV и строки с данными задач. - Использовать модуль `csv` из стандартной библиотеки. - Гарантировать создание каталога и файла при необходимости. **Результат.** После добавления задач файл `data/tasks.csv` содержит актуальные данные.
Загрузка из CSV,**Описание.** Реализовать чтение задач при запуске. **Шаги реализации:** - В `CsvTaskRepository.load` проверять существование файла. - Использовать `csv.DictReader` и создавать объекты `Task`. - Корректно обрабатывать пустой файл и отсутствующие значения. **Результат.** При повторном запуске добавленные ранее задачи подгружаются из файла.
Отметка выполнения задач,"**Описание.** Команда `complete` должна переключать статус задачи. **Шаги реализации:** - В сервисе реализовать поиск задачи и смену флага `completed`. - Сохранять изменения в CSV. - В CLI добавить команду `complete <title>` с подтверждением результата. **Результат.** Статус задачи меняется, выводится актуальная информация, файл обновляется."
Удаление задач,**Описание.** Пользователь может удалить задачу по заголовку. **Шаги реализации:** - В трекере реализовать удаление по названию. - В сервисе обернуть операцию и сохранить CSV. - В CLI добавить команду `delete <title>` с сообщением об успехе или ошибке. **Результат.** Указанная задача удаляется из памяти и CSV-файла.
Фильтрация по статусу,**Описание.** Вывести только выполненные или активные задачи. **Шаги реализации:** - В трекере реализовать метод фильтрации по статусу. - В CLI добавить команду `filter status <done|todo>`. - Отформатировать вывод по аналогии с `list`. **Результат.** Пользователь получает список задач выбранного статуса.
Фильтрация по тегам,**Описание.** Позволить выводить задачи с конкретным тегом. **Шаги реализации:** - В трекере реализовать метод фильтрации по тегу. - Поддержать несколько тегов через аргументы команды. - В CLI добавить `filter tag <tag1> [tag2 ...]`. **Результат.** В консоли отображаются задачи с указанными тегами.
Фильтрация по дедлайну,"**Описание.** Позволить вывести задачи с дедлайном в определённый день. **Шаги реализации:** - Добавить в трекер метод фильтрации по дате. - Использовать `datetime.date` для сравнения. - В CLI реализовать команду `filter due YYYY-MM-DD`. **Результат.** Показаны задачи с нужным дедлайном, неверный формат даты даёт понятную ошибку."
Команда поиска по тексту,"**Описание.** Реализовать поиск по заголовку и описанию. **Шаги реализации:** - В трекере реализовать метод, возвращающий задачи, содержащие подстроку. - Поиск должен быть нечувствительным к регистру. - В CLI добавить команду `search <query>`. **Результат.** Пользователь видит задачи, в полях которых встречается запрос."
Редактирование задач,"**Описание.** Дать возможность изменять описание, дедлайн и теги. **Шаги реализации:** - В сервисе реализовать метод обновления задачи. - В CLI добавить команду `edit <title>` с пошаговым вводом новых значений. - Обновлять CSV после изменений. **Результат.** Изменённая задача сохраняется, выводится подтверждение."
Импорт задач из CSV,"**Описание.** Позволить пользователю загрузить внешний CSV. **Шаги реализации:** - Добавить в репозиторий метод чтения задач из указанного файла. - В сервисе реализовать импорт с заменой текущих данных. - В CLI добавить команду `import <path>` с проверкой существования файла. **Результат.** После импорта задачи заменяются данными из файла, трекер и CSV синхронизированы."
Экспорт задач в CSV,**Описание.** Сохранить копию задач в пользовательский файл. **Шаги реализации:** - В репозитории добавить метод записи в произвольный путь. - В сервисе обернуть экспорт и подготовить данные. - В CLI реализовать команду `export <path>` с сообщением об успехе. **Результат.** Указанный файл содержит актуальный список задач.
Логирование действий,"**Описание.** Журналировать ключевые операции в `logs/app.log`. **Шаги реализации:** - Настроить модуль `logging` в `services.task_service`. - Логировать добавление, изменение, удаление, импорт и экспорт. - Убедиться, что каталог логов создаётся автоматически. **Результат.** В `logs/app.log` появляются записи о действиях пользователя."
Отчёт на сегодня,**Описание.** Формировать отчёт по задачам с дедлайном на текущий день. **Шаги реализации:** - В сервисе реализовать метод отбора и форматирования данных. - Создавать файл `reports/daily_YYYYMMDD.txt`. - В CLI добавить команду `report daily`. **Результат.** После выполнения команды отчёт появляется в каталоге `reports/`.
Отчёт на неделю,**Описание.** Формировать недельный план задач. **Шаги реализации:** - Рассчитывать границы недели по текущей дате. - Генерировать файл `reports/weekly_YYYYWW.txt`. - Добавить команду `report weekly`. **Результат.** Пользователь получает текстовый отчёт с задачами на неделю.
Пользовательский отчёт,**Описание.** Позволить формировать отчёт по текущему фильтру. **Шаги реализации:** - В CLI реализовать `report custom` после применения фильтра. - В сервисе принимать список задач и сохранять в `reports/custom.txt`. - Добавить метаданные о времени генерации и критериях. **Результат.** Файл `reports/custom.txt` содержит задачи в соответствии с фильтром.
Быстрые подсказки команд,"**Описание.** Улучшить команду `help` дополнительными примерами. **Шаги реализации:** - Сгруппировать команды по категориям (общие, задачи, отчёты). - Добавить краткие примеры использования. - Обеспечить читаемое форматирование (отступы, символы списка). **Результат.** Команда `help` выводит структурированную справку."
Подготовка справочных материалов,**Описание.** Обновить README и финальное ТЗ после реализации базовых функций. **Шаги реализации:** - Описать сценарий использования приложения и доступные команды. - Добавить ссылки на документацию модулей `csv` и `logging` (если не добавлены ранее). - Уточнить требования к структуре данных и отчётов. **Результат.** Документация отражает текущее состояние проекта и помогает новым участникам подключиться.
