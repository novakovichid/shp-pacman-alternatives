Title,Description
Кнопки на сцене с меню,"Добавить на сцену меню две кнопки:
1. ""Новая игра"". При нажатии - (пока что) ничего не происходит.
2. ""Выход"". При нажатии - приложение закрывается.

Реализовать в ветке `feature/menu/buttons`."
Сцена с игрой,"Добавить в приложение класс GameScene, олицетворяющий сцену с игрой. 

Пока что сцена будет пустой. 

Добавить эту сцену в приложение.

Переход со сцены меню на эту сцену должен производиться при нажатии по кнопки ""1"".

Реализовать в файле `scenes/game.py`.

Реализовать в ветке `feature/scenes/game`."
Сцена с настройками,"Добавить в приложение класс SettingsScene, олицетворяющий сцену с настройками. 

Пока что сцена будет пустой. 

Добавить эту сцену в приложение.

Переход со сцены меню на эту сцену должен производиться при нажатии по кнопки ""2"".

Реализовать в файле `scenes/settings.py`.

Реализовать в ветке `feature/scenes/settings`."
Сцена с паузой,"Добавить в приложение класс PauseScene, олицетворяющий сцену, которая отображается во время паузы игры. 

Пока что сцена будет пустой. 

Добавить эту сцену в приложение.

Переход со сцены меню на эту сцену должен производиться при нажатии по кнопки ""P"".

Реализовать в файле `scenes/pause.py`.

Реализовать в ветке `feature/scenes/pause`."
Класс пакмана,"Добавить в приложение класс пакмана (Pacman)

- Объект этого класса должен уметь отображаться в виде картинки (пока что жёлтый прямоугольник). 
- Объект этого класса должен уметь двигаться в четырёх направлениях. Направление задаётся клавишами WASD. После задания направления - пакман постоянно двигается в этом направлении. 

Добавить объект пакмана на первую сцену.

Класс должен быть реализован в файле `objects/images/pacman.py`.

Задача должна быть решена в ветке `feature/pacman`."
Класс малого зерна,"Добавить в приложение класс малого зерна (Seed)

- Объект этого класса должен уметь отображаться в виде картинки (пока что жёлтый круг радиусом в 10 пикселей). 
- Объект этого класса должен хранить в себе вес малого зерна (по умолчанию 10).

Добавить объект зерна на первую сцену.

Класс должен быть реализован в файле `objects/images/seeds.py`.

Задача должна быть решена в ветке `feature/seeds/seed`."
Класс большого зерна,"Добавить в приложение класс большого зерна (Energizer)

- Объект этого класса должен уметь отображаться в виде картинки (пока что жёлтый круг радиусом в 20 пикселей). 
- Объект этого класса должен хранить в себе вес малого зерна (по умолчанию 50).

Добавить объект зерна на первую сцену.

Класс должен быть реализован в файле `objects/images/seeds.py`.

Задача должна быть решена в ветке `feature/seeds/energizer`."
Класс клетки,"Добавить в приложение класс клетки (Cell).

- Клетка - это часть поля, внутри хранит тип (0 - пустое место, 1 - стена, 2 - комната для призраков, 3 - телепорт). 
- В зависимости от этого - её нужно отрисовывать разными цветными квадратами.
- Добавить 4 объекта клетки (с разными типами) на первую сцену.

Класс должен быть реализован в файле `objects/images/cells.py`.

Задача должна быть решена в ветке `feature/cell`."
Класс поля,"Добавить в приложение класс поля (Field).

- Поле представляет собой двумерный массив, содерждание которого задаётся в файле field.txt. Конструктор класса - загружает поле из файла в папять. Структура поля в файле - эквивалентна структуре поля оригинального пакмана.
- В массиве хранятся числа (0 - пустая клетка, 1 - стена).
- Данный класс не должен содержать методов отрисовки (за это будет отвечать отдельный класс).

Класс должен быть реализован в файле `logic/field.py`.

Задача должна быть решена в ветке `feature/field/logic`."
Класс отрисовки поля,"Добавить в приложение класс-отрисовщик поля (FieldDrawer).

- В конструктор этого класса передаётся двумерный массив и размер стороны одной клетки в пикселях.
- Объект этого класса должен уметь отрисовываться на экране (пустая ячейка - чёрный квадрат с указанной длиной стороны, заполненная ячейка - синий квадрат).

Добавить объект отрисовщика поля на первую сцену. В качестве двумерного массива - передать ему на вход массив размером 5х5 ячеек с произвольной структурой.

Класс должен быть реализован в файле `objects/field.py`.

Задача должна быть решена в ветке `feature/field/drawer`."
Класс красного призрака,"Добавить в приложение класс красного призрака (BlinkyGhost).

- Объект этого класса отрисовывается в виде изображения красного прямоугольника.
- Объект этого класса должен уметь двигаться вправо (пока что без ограничений)

Добавить объект красного призрака на первую сцену.

Класс должен быть реализован в файле `objects/ghosts/blinky.py`.

Задача должна быть решена в ветке `feature/ghosts/blinky`."
Класс розового призрака,"Добавить в приложение класс розового призрака (PinkyGhost).

- Объект этого класса отрисовывается в виде изображения розового прямоугольника.
- Объект этого класса должен уметь двигаться влево (пока что без ограничений)

Добавить объект розового призрака на первую сцену.

Класс должен быть реализован в файле `objects/ghosts/pinky.py`.

Задача должна быть решена в ветке `feature/ghosts/pinky`."
Класс голубого призрака,"Добавить в приложение класс голубого призрака (InkyGhost).

- Объект этого класса отрисовывается в виде изображения голубого прямоугольника.
- Объект этого класса должен уметь двигаться вниз (пока что без ограничений)

Добавить объект голубого призрака на первую сцену.

Класс должен быть реализован в файле `objects/ghosts/inky.py`.

Задача должна быть решена в ветке `feature/ghosts/inky`."
Класс оранжевого призрака,"Добавить в приложение класс оранжевого призрака (ClydeGhost).

- Объект этого класса отрисовывается в виде изображения оранжевого прямоугольника.
- Объект этого класса должен уметь двигаться вверх (пока что без ограничений)

Добавить объект оранжевого призрака на первую сцену.

Класс должен быть реализован в файле `objects/ghosts/clyde.py`.

Задача должна быть решена в ветке `feature/ghosts/clyde`."
Класс вишенки,"Добавить в приложение класс вишенки (Cherry).

- Объект этого класса отрисовывается в виде изображения красного круга.
- Доступен метод show и hide, скрывающий и отображающий вишенку на экране соответственно.
- В логике прописано, что вишенка появляется через три секунды и после этого через пять секунд от момента появления - исчезает.

Добавить объект вишенки на первую сцену.

Класс должен быть реализован в файле `objects/cherry.py`.

Задача должна быть решена в ветке `feature/cherry`."
Класс подсчёта жизней,"Добавить в приложение класс LifeCounter, хранящий в себе количество жизней (целое число)

- Стартовое значение, задающееся в виде параметра конструктора = 3
- Доступны методы add и remove, увеличивающие или уменьшающие количество на 1 соответственно. 
- Если количество жизней ушло в отрицательные значения нужно сгенерировать исключение RuntimeError. 
- Данный класс не должен содержать методов отрисовки (за это будет отвечать отдельный класс).

Класс должен быть реализован в файле `logic/life.py`.

Задача должна быть решена в ветке `feature/life/logic`."
Класс отрисовки количества жизней,"Добавить в приложение класс LifeDrawer, отрисовывающий количество жизней.

- Количество жизней (пока что) показывается в виде нескольких изображений жёлтых кругов.
- Стартовое количество, передаваемое в качестве параметра конструктора = 3.
- При нажатии кнопки F - количество жизней уменьшается и количество отображаемых кругов - тоже.

Добавить объект класса на первую сцену.

Класс должен быть реализован в файле `objects/life.py`.

Задача должна быть решена в ветке `feature/life/drawer`."
Класс подсчёта очков,"Добавить в приложение класс ScoreCounter, хранящий в себе количество очков (целое число).

- Стартовое значение, задающееся в виде параметра конструктора = 0
- Доступен метод add(X), добавляющий X к значению количества очков.
- Данный класс не должен содержать методов отрисовки (за это будет отвечать отдельный класс).

Класс должен быть реализован в файле `logic/score.py`.

Задача должна быть решена в ветке `feature/score/logic`."
Класс отрисовки количества очков,"Добавить в приложение ScoreDrawer, отображающий на экране количество очков.

- Стартовое количество, передаваемое в качестве параметра конструктора = 0.
- Класс наследуется от RecalculableText.

Добавить объект класса на первую сцену.

Класс должен быть реализован в файле `objects/score.py`.

Задача должна быть решена в ветке `feature/score/drawer`."
Класс подсчёта рекордов,"Добавить в приложение класс HighscoreTable, хранящий таблицу рекордов.

- Таблица состоит из строк вида ""имя игрока - количество набранных очков"".
- Таблица изначально пуста.
- Таблица максимально хранит 10 строчек (в порядке убывания набранных очков).
- При запуске приложения таблица загружается из файла highscores.txt.
- При завершении программы таблица сохраняется в тот же файл. 
- Доступен метод add_score(player_name, player_score), добавляющий нового пользователя на нужное место в таблице (или не добавляющий, если количество очков меньше, чем у десятого места).
- Данный класс не должен содержать методов отрисовки (за это будет отвечать отдельный класс).

Класс должен быть реализован в файле `logic/highscore.py`.

Задача должна быть решена в ветке `feature/highscore/logic`."
Класс отрисовки таблицы рекордов,"Добавить в класс HighscoreTableDrawer, отображающий таблицу рекорднов на экран.

- На вход конструктору подаётся список словарей (вида {'name': 'User', 'score': 123}), нужно отобразить его на экран. 
- Формат отображения - любой.

Добавить объект класса на первую сцену. В качестве исходных данных конструктора - передать на вход список из четырёх произвольных имён и набранных очков, упорядоченных по убыванию.

Класс должен быть реализован в файле `objects/highscore.py`.

Задача должна быть решена в ветке `feature/highscore/drawer`."
Подключение звуков к игре,"Провести исследование и определить, как подключить к игре механизм воспроизведения произвольных звуков.

Руководствоваться документацией используемой мультимедийной библиотеки.

В качестве результата нужно создать класс Sound.
- в конструктор класса передаётся имя файла со звуком, и он загружается в память.
- доступны методы play и stop, запускающие воспроизведение звука и останавливающие его соответственно.

Добавить два объекта с произвольными звуками в приложение. 
- при нажатии клавиши ""H"" - запускается звук из первого объекта. 
- при нажатии клавиши ""J"" - запускается звук из обоих объектов (чтобы он наложились друг на друга).

Класс должен быть реализован в файле `logic/sound.py`.

Задача должна быть решена в ветке `feature/sound`."
Поиск картинок для игры,"Произвести поиск картинок, требующихся для работы игры.

Нужны картинки:
- пакмана, 
- всех четырёх призраков, 
- обоих типов зёрен, 
- вишенки. 

Формат картинок: png, с прозрачностью.
Размер: любой, не меньше 32х32.

Найти и добавить их в папку `images/`.
Задача должна быть решена в ветке `feature/images`."
Поиск звуков для игры,"Произвести поиск звуков, требующихся для работы игры.

Нужны звуки:
- съедение зерна, 
- съедение пакмана, 
- начало игры, 
- конец игры
- иные, если найдутся.

Формат звуков: wav, без сжатия

Найти и добавить их в папку `sounds/`.
Задача должна быть решена в ветке `feature/sounds`."
Поиск алгоритмов,"Произвести поиск оригинальных алгоримов призраков, требующихся для работы игры.

Нужны алгоримы:
- поиск пути в лабиринте,
- алгоритм определения целевой точки движения красного призрака,
- алгоритм определения целевой точки движения розового призрака,
- алгоритм определения целевой точки движения голубого призрака,
- алгоритм определения целевой точки движения оранжевого призрака,

Формат ответа: текстовый файл.

Найти и добавить их в папку `algorithms`, по отдельному txt-файлу для каждого алгоритма.
Задача должна быть решена в ветке `feature/ghost_algo`."
