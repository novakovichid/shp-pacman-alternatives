в репозитории сейчас лежит пример заготовки учебного проекта. Твоя задача - создать ещё 6 заотовок (каждая в своем каталоге) по образу и подобию этого Пакмана. 
В целом структура должна быть такой же, подробности по каждому проекту будут ниже.
Критично важно соблюдать полноту контента, описаний. Стилистику текстов и кода. Цель всех проектов - отработка ООП, без дополнительных сложностей, на Питоне. Подготовь 6 заготовок проектов в отдельных каталогах репозитория. Для библиотек работы с csv и json нужно приложить в ридми ссылки на документацию. Создавать эталонное решение не нужно, но нужно подробно описать требуемый результат в ТЗ
А теперь более детальные описания:
1. Console Tracker

Идея: простое консольное приложение для ведения личных задач. Пользователь может добавлять, отмечать, удалять и фильтровать задачи, а программа хранит данные в CSV-файле. Проект отрабатывает классы, файловые операции, работу со списками и словарями, а также принципы структурирования кода.
Основной стек: Python (стандартная библиотека — csv, os, datetime, logging).
Сложность: базовый уровень.
Ожидаемый результат: структурированное CLI-приложение с чётким разделением на слои (core, storage, services, ui). Функции добавления, редактирования, фильтрации и сохранения задач. Наличие отчётов и логов.

2. Data Analyst CLI

Идея: инструмент командной строки для анализа CSV-файлов с табличными данными. Пользователь может просматривать столбцы, вычислять средние, минимальные и максимальные значения, фильтровать строки и сохранять отчёты.
Основной стек: Python (модули csv, statistics, argparse, os, pathlib).
Сложность: средний уровень.
Ожидаемый результат: модульная утилита, работающая с текстовыми отчётами и файлами. Поддерживает простую агрегацию, фильтрацию и генерацию текстовых отчётов (reports/summary.txt, reports/stats.txt, reports/missing.txt). Все операции выполняются через консольные команды и не требуют внешних библиотек.

3. Data Analyst Tkinter

Идея: визуальная версия предыдущего проекта. Графический интерфейс на tkinter, который позволяет пользователю выбрать CSV-файл, просмотреть статистику и сохранить отчёты через кнопки. Вся бизнес-логика остаётся в отдельных модулях, UI лишь вызывает нужные методы.
Основной стек: Python (tkinter, csv, statistics, os).
Сложность: средний уровень.
Ожидаемый результат: простое настольное приложение с кнопками, полями и диалогами. Реализовано хранение последнего пути к файлу, отображение статистики, экспорт отчётов. Никаких сторонних GUI-фреймворков.

4. Space Invaders (pyglet)

Идея: аркадная игра с управляемым кораблём, стрельбой и падающими врагами. Основной акцент — на архитектуре и объектной модели: игрок, враги, пули, игровой цикл.
Основной стек: Python + pyglet.
Сложность: выше среднего, но не сложнее учебного пакмана.
Ожидаемый результат: минимальная 2D-игра, написанная по принципам ООП: отдельные классы для сущностей, обработка событий клавиатуры, обновление кадров и отрисовка. Без внешних файлов конфигураций (ни JSON, ни CSV). Настройки задаются прямо в коде.

5. Console RPG Quest

Идея: текстовая ролевая игра, где игрок выбирает действия, исследует локации, сражается и собирает предметы. Движок реализован на классах Player, Enemy, Item, Quest. Всё взаимодействие проходит через консоль.
Основной стек: Python (ООП, модули random, time, json для сохранений).
Сложность: средний уровень.
Ожидаемый результат: базовый движок RPG с системой инвентаря, боя, квестов и сохранений. Код разделён на модули, взаимодействие происходит через текстовые команды. Основной упор — на продуманную логику классов и их связи.

6. Console Knowledge Base (TXT)

Идея: консольная база заметок, где каждая заметка хранится как отдельный .txt-файл, а программа создаёт индекс и позволяет искать по ключевым словам. Форматы простые и человекочитаемые.
Основной стек: Python (файловая система, os, работа со строками).
Сложность: базовый уровень.
Ожидаемый результат: минималистичный инструмент для хранения и экспорта заметок. Команды создания, удаления, поиска и экспорта всех заметок в общий файл. Без JSON, без внешних библиотек, только работа с текстами.

Единые требования ко всем проектам

Общая структура

Каждый проект имеет чёткое разделение ответственности между слоями (модель, сервис, интерфейс).

Архитектура построена в ООП-стиле.

Задачи

У каждого проекта две группы задач:

25 стартовых — базовые шаги по созданию и развитию функционала.

15 расширенных — крупные, содержательные доработки (например, добавление интерфейса, системы отчётов, сохранений, инвентаря, меню, улучшений UI и т.п.).

Расширенные задачи не вводят новые технологии (никаких CI, тестов, Docker и т.п.), а лишь расширяют существующую механику.

Документация

В docs/FINAL_TZ.md — подробное техническое задание: цель, структура, UX, ограничения, минимальные требования, артефакты.

Каждая задача содержит:

краткое описание;

детали реализации;

чёткое описание результата выполнения задачи
