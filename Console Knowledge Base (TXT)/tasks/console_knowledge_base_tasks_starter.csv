Title,Body
Автоматическое создание каталогов,"**Описание.** Обеспечить создание директорий `notes/`, `index/`, `exports/`, `logs/` при запуске приложения. **Шаги реализации:** - Дополнить `Settings` путями к каталогам. - В `ConsoleApplication` добавить инициализацию директорий перед запуском CLI. - Использовать `Path.mkdir(parents=True, exist_ok=True)`. **Результат.** После запуска `python main.py` каталоги появляются автоматически, ошибок нет."
Расширение модели заметки,"**Описание.** Модель `Note` должна содержать ключевые поля заметки. **Шаги реализации:** - Добавить атрибуты `content`, `keywords`, `created_at`, `updated_at`. - Реализовать методы обновления содержимого и ключевых слов. - Подготовить свойство для безопасного имени файла. **Результат.** Экземпляры `Note` содержат все необходимые данные и могут обновляться."
Реализация коллекции KnowledgeBase,"**Описание.** Класс `KnowledgeBase` должен управлять заметками в памяти. **Шаги реализации:** - Хранить заметки во внутреннем списке. - Реализовать методы `add_note`, `all_notes`, `search`, `remove`. - Возвращать копии коллекций, а не исходный список. **Результат.** Коллекция позволяет добавлять и находить заметки по ключевым словам."
Загрузка стартовых заметок,**Описание.** Организовать импорт заметок из хранилища при запуске. **Шаги реализации:** - Дополнить `KnowledgeBase.load_initial` добавлением заметок через `add_note`. - В `NoteService` вызвать загрузку после чтения из репозитория. - Обрабатывать отсутствие файлов без ошибки. **Результат.** После запуска база содержит данные из каталога `notes/`.
Сканирование файлов в репозитории,"**Описание.** Реализовать метод `TxtRepository.load_notes`. **Шаги реализации:** - Пройти по файлам каталога `notes/`. - Считать содержимое и метаданные, создать экземпляры `Note`. - Собрать список заметок и вернуть его в сервис. **Результат.** Репозиторий возвращает заметки при наличии файлов."
Сохранение заметки в файл,"**Описание.** Добавить в `TxtRepository` сохранение заметки. **Шаги реализации:** - Получать безопасное имя файла из модели. - Записывать заголовок, ключевые слова и текст в `.txt`-файл. - Обновлять даты в модели перед сохранением. **Результат.** После создания заметки появляется соответствующий файл."
Удаление файла заметки,"**Описание.** Реализовать метод `delete_note`. **Шаги реализации:** - Находить файл по безопасному имени. - Удалять его, игнорируя отсутствие файла. - Подготавливать информацию для обновления индекса. **Результат.** Удалённая заметка исчезает из каталога и не мешает дальнейшей работе."
Запись индексного файла,**Описание.** Генерировать индекс ключевых слов. **Шаги реализации:** - В `TxtRepository.write_index` принимать коллекцию заметок. - Для каждого ключевого слова собирать список файлов. - Записывать данные в `index/index.txt` в человекочитаемом формате. **Результат.** После изменения заметок индекс обновляется и отражает актуальное состояние.
Экспорт всех заметок,**Описание.** Реализовать метод `export_notes`. **Шаги реализации:** - Формировать файл `exports/all_notes.txt` с заголовками и разделителями. - Включить ключевые слова и даты в экспорт. - Перезаписывать файл при каждом экспорте. **Результат.** Пользователь получает сводный текстовый файл со всеми заметками.
Инициализация службы заметок,**Описание.** Настроить `NoteService` на работу с репозиторием. **Шаги реализации:** - В конструкторе загрузить заметки из `TxtRepository`. - Передать их в `KnowledgeBase.load_initial`. - Добавить обработку отсутствующего каталога. **Результат.** При старте сервис имеет актуальную коллекцию заметок.
Создание заметки через сервис,**Описание.** Реализовать метод `create_note`. **Шаги реализации:** - Добавлять заметку в память через `KnowledgeBase`. - Сохранять её в файловой системе через репозиторий. - После сохранения обновлять индекс. **Результат.** Новая заметка появляется в памяти и на диске.
Удаление заметки через сервис,**Описание.** Реализовать метод `delete_note`. **Шаги реализации:** - Удалять запись из коллекции `KnowledgeBase`. - Удалять файл через `TxtRepository`. - Перестраивать индекс после удаления. **Результат.** Заметка исчезает из списка и файловой системы.
Перестроение индекса,**Описание.** Заполнить метод `rebuild_index`. **Шаги реализации:** - Получать актуальный список заметок. - Передавать его в `TxtRepository.write_index`. - Возвращать количество обработанных ключевых слов. **Результат.** После вызова индекс отражает текущее состояние базы.
Экспорт всех заметок через сервис,**Описание.** Реализовать метод `export_all`. **Шаги реализации:** - Получать заметки через `KnowledgeBase`. - Вызывать `TxtRepository.export_notes`. - Возвращать путь к файлу экспорта. **Результат.** Команда экспорта создаёт актуальный сводный файл.
Консольный цикл команд,"**Описание.** Организовать в `CommandLoop` основной цикл. **Шаги реализации:** - Реализовать метод `run`, принимающий ввод пользователя. - Добавить обработку команд `help` и `exit`. - Выводить подсказку по доступным действиям. **Результат.** Приложение принимает команды и корректно завершает работу."
Команда создания заметки,"**Описание.** Реализовать консольное создание заметки. **Шаги реализации:** - Запрашивать заголовок, ключевые слова, текст. - Формировать объект `Note` и передавать в сервис. - Выводить подтверждение и путь к файлу. **Результат.** Пользователь может добавить заметку из консоли."
Команда вывода списка заметок,"**Описание.** Добавить отображение списка. **Шаги реализации:** - Получать заметки из сервиса. - Форматировать вывод с порядковым номером, заголовком, датой изменения. - Отображать ключевые слова в строке. **Результат.** Команда `list` показывает весь список заметок."
Просмотр заметки,"**Описание.** Реализовать команду `view`. **Шаги реализации:** - Запрашивать заголовок или номер записи. - Получать заметку из сервиса. - Выводить заголовок, ключевые слова, содержимое. **Результат.** Пользователь читает конкретную заметку прямо в консоли."
Поиск по ключевому слову,**Описание.** Добавить команду `search`. **Шаги реализации:** - Запрашивать ключевое слово. - Использовать метод `KnowledgeBase.search`. - Выводить найденные заметки с указанием совпадений. **Результат.** Пользователь видит список заметок по ключу.
Удаление заметки,**Описание.** Реализовать команду `delete`. **Шаги реализации:** - Запрашивать заголовок заметки. - Передавать удаление в сервис. - Показывать подтверждение и обновлённый размер базы. **Результат.** Заметка удаляется командой из интерфейса.
Экспорт из интерфейса,**Описание.** Добавить команду `export`. **Шаги реализации:** - Запускать сервисный метод `export_all`. - Выводить путь к созданному файлу. - Обрабатывать ошибки записи файла. **Результат.** Пользователь может получить общий файл со всеми заметками.
Перестроение индекса из интерфейса,**Описание.** Реализовать команду `reindex`. **Шаги реализации:** - Запускать сервисный метод `rebuild_index`. - Показывать количество обработанных ключевых слов. - Сообщать об успехе пользователю. **Результат.** Индекс можно пересобрать одной командой.
Сообщения об ошибках,**Описание.** Настроить пользовательские сообщения при ошибках. **Шаги реализации:** - Обрабатывать исключения файловой системы в сервисе. - Возвращать понятные тексты ошибок в UI. - Добавить единый формат вывода ошибок. **Результат.** Пользователь получает дружелюбные сообщения вместо трассировки.
Логирование операций,"**Описание.** Добавить логирование в ключевые действия. **Шаги реализации:** - Настроить `logging` с выводом в `logs/app.log`. - Логировать создание, удаление, экспорт и ошибки. - Убедиться, что лог-файл создаётся автоматически. **Результат.** В логах фиксируются основные действия пользователя."
Обновление README,**Описание.** Дополнить документацию инструкциями по использованию. **Шаги реализации:** - Описать поддерживаемые команды и формат заметок. - Добавить примеры запуска и экспорта. - Перечислить местоположение рабочих файлов. **Результат.** README содержит актуальное руководство для пользователя.
