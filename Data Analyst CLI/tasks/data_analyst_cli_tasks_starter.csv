Title,Body
Подготовка служебных каталогов,"**Описание.** Обеспечить автоматическое создание `data/`, `logs/`, `reports/` при запуске приложения. **Шаги реализации:** - Дополнить `Settings` путями к файлам отчётов и логов. - Добавить в `CliApplication` инициализацию директорий перед запуском CLI. - Использовать `Path.mkdir(parents=True, exist_ok=True)`. **Результат.** После запуска `python main.py` в проекте появляются пустые каталоги без ошибок."
Расширение модели DataRow,**Описание.** Модель строки должна хранить данные с доступом по именам столбцов. **Шаги реализации:** - Добавить методы получения и обновления значений по ключу. - Обеспечить защиту от изменения исходного словаря напрямую. - Реализовать представление строки в человекочитаемом виде. **Результат.** Объекты `DataRow` позволяют безопасно читать и изменять значения.
Расширение ColumnStats,**Описание.** Структура статистики должна поддерживать накопление значений. **Шаги реализации:** - Добавить методы `register_value` и `register_missing`. - Хранить сумму значений для последующего расчёта среднего. - Предусмотреть метод `finalize()` для вычисления средней величины. **Результат.** Экземпляры `ColumnStats` способны накапливать информацию и вычислять метрики.
Реализация DataTable.load_rows,"**Описание.** Метод должен загружать коллекцию `DataRow` и обновлять список столбцов. **Шаги реализации:** - Очистить текущие данные перед загрузкой. - Вычислить имена столбцов на основе первой строки. - Сохранять копии объектов, чтобы избежать побочных эффектов. **Результат.** После вызова `load_rows` таблица содержит свежие данные и список столбцов."
Метод DataTable.column_names,**Описание.** Вернуть имена столбцов без возможности изменения извне. **Шаги реализации:** - Возвращать новый список или кортеж. - Обеспечить совместимость с пустой таблицей. **Результат.** Вызов `column_names()` выдаёт корректный перечень столбцов.
Метод DataTable.summarize,"**Описание.** Вычислить статистику для указанного столбца. **Шаги реализации:** - Использовать `ColumnStats` для накопления значений. - Определять, является ли значение числом (поддержать `.` и `,`). - Возвращать объект `ColumnStats` с заполненными полями. **Результат.** Метод выдаёт корректную статистику при наличии числовых данных и считает пропуски."
Метод DataTable.filter_rows,"**Описание.** Вернуть строки, удовлетворяющие переданному предикату. **Шаги реализации:** - Принимать функцию от `DataRow`. - Возвращать новый список строк, не изменяя исходную коллекцию. **Результат.** Фильтрация работает без побочных эффектов."
CsvDatasetReader.load,**Описание.** Реализовать чтение CSV с помощью стандартной библиотеки. **Шаги реализации:** - Использовать `csv.DictReader` для чтения данных. - Возвращать список `DataRow`. - Обрабатывать отсутствие файла и пустой набор. **Результат.** Метод загружает данные или возвращает пустой список без ошибок.
CsvDatasetReader.detect_columns,**Описание.** Определить имена столбцов по заголовку. **Шаги реализации:** - Открывать файл и читать только первую строку. - Возвращать список названий в порядке следования. **Результат.** Метод возвращает корректный заголовок или пустой список.
ReportWriter.save_summary,"**Описание.** Сохранять агрегированную статистику в `reports/summary.txt`. **Шаги реализации:** - Форматировать каждую строку: `column: count=..., min=..., max=..., avg=...`. - Создавать каталог `reports/` при необходимости. - Использовать кодировку UTF-8. **Результат.** После вызова метод создаёт файл с описанием статистики."
ReportWriter.save_missing_report,**Описание.** Формировать отчёт о пропущенных значениях. **Шаги реализации:** - Проходить по списку `ColumnStats` и выводить количество пропусков. - Добавить раздел с предупреждениями для столбцов с высоким уровнем пропусков (>20%). **Результат.** Файл `reports/missing.txt` содержит человекочитаемую сводку пропусков.
ReportWriter.save_filtered_rows,**Описание.** Экспортировать выбранные строки в текстовый файл. **Шаги реализации:** - Принимать путь назначения и список `DataRow`. - Сохранять заголовок и строки в табличном виде (разделитель `\t`). **Результат.** Пользователь получает файл с отфильтрованными данными.
DataAnalysisService.load_dataset,**Описание.** Связать загрузку таблицы с хранилищем. **Шаги реализации:** - Чтение CSV через `CsvDatasetReader`. - Передача строк в `DataTable.load_rows`. - Возврат списка столбцов для дальнейшего использования. **Результат.** После вызова сервис содержит загруженную таблицу и список столбцов.
DataAnalysisService.available_columns,**Описание.** Вернуть список столбцов текущего набора данных. **Шаги реализации:** - Делегировать вызов к `DataTable.column_names`. - Обрабатывать ситуацию без загруженных данных. **Результат.** Метод выдаёт актуальные имена столбцов или пустой список.
DataAnalysisService.compute_summary,**Описание.** Сформировать статистику для столбца. **Шаги реализации:** - Делегировать `DataTable.summarize`. - Обрабатывать ошибки отсутствия столбца. - Возвращать `ColumnStats`. **Результат.** Вызов возвращает объект статистики с заполненными полями.
DataAnalysisService.filter_rows,"**Описание.** Вернуть строки, удовлетворяющие условию равенства. **Шаги реализации:** - Использовать `DataTable.filter_rows` с предикатом. - Поддержать сравнение без учёта регистра. **Результат.** Пользователь получает список подходящих строк."
DataAnalysisService.export_reports,**Описание.** Сохранить отчёты в файловой системе. **Шаги реализации:** - Вызывать методы `ReportWriter` для summary и missing. - Принимать путь для сохранения фильтрованных данных. - Возвращать перечень созданных файлов. **Результат.** После выполнения в каталоге `reports/` появляются все запрошенные отчёты.
CommandLineInterface.run,"**Описание.** Организовать базовый разбор аргументов. **Шаги реализации:** - Добавить аргументы: `--file`, `--summary`, `--column`, `--filter`. - Вызвать соответствующие методы сервиса. - Печатать результат в консоль. **Результат.** Приложение реагирует на аргументы и выводит сообщения."
Обработка отсутствия файла,**Описание.** Пользователь получает понятное сообщение при ошибке чтения. **Шаги реализации:** - Перехватывать исключения чтения. - Выводить совет с примером пути к файлу. **Результат.** Программа не падает и сообщает о проблеме.
Команда вывода структуры,"**Описание.** Добавить аргумент `--info`, который выводит список столбцов и количество строк. **Шаги реализации:** - Реализовать метод сервиса для подсчёта количества строк. - Форматировать вывод в виде списка с номерами. **Результат.** Пользователь быстро узнаёт структуру таблицы."
Логирование операций,"**Описание.** Настроить логирование в файл `logs/app.log`. **Шаги реализации:** - Использовать модуль `logging` со стандартной конфигурацией. - Логировать запуск приложения, загрузку файла, сохранение отчётов. **Результат.** После анализа лог содержит информацию о действиях."
Отчёт stats.txt,"**Описание.** Создать дополнительный отчёт с общей статистикой. **Шаги реализации:** - Рассчитывать количество строк, столбцов, числовых и текстовых столбцов. - Сохранять данные в `reports/stats.txt`. **Результат.** Пользователь получает краткую сводку по набору данных."
Поддержка разделителя `;`,"**Описание.** Обеспечить работу с CSV, где в качестве разделителя используется `;`. **Шаги реализации:** - Добавить аргумент `--delimiter` в CLI. - Передавать значение в `CsvDatasetReader`. **Результат.** Утилита корректно обрабатывает оба формата."
Команда фильтрации в файл,"**Описание.** Добавить флаг `--export-filter`, который сохраняет результат фильтрации. **Шаги реализации:** - Реализовать генерацию имени файла по шаблону. - Использовать `ReportWriter.save_filtered_rows`. **Результат.** При указании флага создаётся файл с выбранными строками."
Интерактивный режим без аргументов,"**Описание.** Добавить простой текстовый интерфейс, если утилита запущена без флагов. **Шаги реализации:** - Выводить меню с командами (загрузка файла, вывод колонок, статистика, выход). - Использовать `input()` и методы сервиса. **Результат.** Пользователь может работать с утилитой в пошаговом режиме."
