Title,Body
Создание служебных каталогов,"**Описание.** Обеспечить автоматическое создание каталогов `data/`, `logs/`, `saves/` при запуске. **Шаги реализации:** - В `ConsoleRPGApplication` добавить подготовку директорий до инициализации UI. - Использовать `Settings` и `Path.mkdir(parents=True, exist_ok=True)`. - Создавать пустые файлы сохранения и логов при отсутствии. **Результат.** После `python main.py` структура каталогов появляется автоматически."
Расширение настроек игры,"**Описание.** Настройки должны описывать параметры RPG. **Шаги реализации:** - Добавить в `Settings` стартовые характеристики, список классов, лимиты инвентаря. - Вынести пути к файлам бестиария и предметов. - Настроить константы задержек боя и пауз. **Результат.** Все слои получают доступ к расширенному набору констант."
Реализация логики предметов,"**Описание.** Класс `Item` должен применять эффекты. **Шаги реализации:** - Заполнить `apply_to`, изменяющий характеристики цели. - Проверять допустимые типы предметов. - Возвращать структуру изменений для логов. **Результат.** Предметы корректно влияют на персонажей."
Базовый персонаж,"**Описание.** `Character` управляет здоровьем и инвентарём. **Шаги реализации:** - Реализовать `is_alive`, `receive_damage`, `add_item`. - Учитывать защиту и ограничение по вместимости. - Возвращать служебные данные для логов. **Результат.** Персонажи реагируют на урон и предметы."
Прокачка игрока,"**Описание.** Игрок должен накапливать опыт. **Шаги реализации:** - Дополнить `gain_experience` расчётом уровней. - Повышать характеристики при апгрейде. - Возвращать описание полученных бонусов. **Результат.** Игрок прогрессирует при получении опыта."
Выбор действия игрока,"**Описание.** `choose_action` подготавливает шаг в бою. **Шаги реализации:** - Принимать контекст и доступные опции. - Возвращать объект действия с типом и параметрами. - Поддержать ветки атаки, защиты, предметов и навыков. **Результат.** Бой получает структурированное решение игрока."
Поведение врага,"**Описание.** `Enemy.decide_move` выбирает действия. **Шаги реализации:** - Анализировать здоровье и тип поведения. - Возвращать `TurnAction` с допустимыми типами. - Поддержать особые приёмы из таблицы лута. **Результат.** Враги действуют осмысленно и разнообразно."
Проверка условий квеста,"**Описание.** `Quest.is_ready_to_complete` оценивает цели. **Шаги реализации:** - Проверять выполнение целей по данным игрока. - Поддержать типы победа, предмет, локация. - Возвращать булево значение и невыполненные шаги. **Результат.** Квесты корректно переходят в завершение."
Награды квеста,"**Описание.** `Quest.apply_rewards` выдаёт бонусы. **Шаги реализации:** - Обрабатывать опыт, золото, предметы, репутацию. - Использовать методы игрока для начислений. - Помечать квест выполненным. **Результат.** Завершение квеста приносит игроку награды."
Обновление времени суток,"**Описание.** Мир должен менять время. **Шаги реализации:** - В `advance_time` переключать фазы суток. - Генерировать события в зависимости от периода. - Возвращать описание изменений для UI. **Результат.** Мир реагирует на время и создаёт атмосферу."
Появление врагов,"**Описание.** `spawn_enemy` управляет сценой. **Шаги реализации:** - Добавлять врагов в `active_enemies` с ограничениями. - Применять модификаторы сложности из настроек. - Возвращать справку для журнала событий. **Результат.** Враги появляются контролируемо."
Назначение квестов,"**Описание.** `start_quest` устанавливает активное задание. **Шаги реализации:** - Проверять отсутствие другого сюжетного квеста. - Обновлять журнал мира и состояние игрока. - Возвращать подтверждение для UI. **Результат.** Игрок может брать новые задания."
Управление очередностью ходов,"**Описание.** `BattleContext.next_turn` задаёт порядок. **Шаги реализации:** - Формировать очередь по инициативе. - Переключать актёров и увеличивать раунд. - Возвращать текущего участника. **Результат.** Бой выполняется в корректном порядке."
Проверка завершения боя,"**Описание.** `BattleContext.is_finished` отслеживает конец. **Шаги реализации:** - Проверять здоровье участників и флаг побега. - Определять причину завершения. - Возвращать булево значение и пояснение. **Результат.** Бой завершается корректно."
Разрешение действий,"**Описание.** `TurnAction.resolve` применяет выбор. **Шаги реализации:** - Обработать типы атаки, защиты, предметов, навыков. - Рассчитывать урон с учётом защиты. - Возвращать структуру результатов. **Результат.** Бой обрабатывает действия участников."
Проверка трофеев,"**Описание.** `LootDrop.is_empty` сообщает о наградах. **Шаги реализации:** - Проверять пустоту списков предметов и золота. - Подготовить строковое представление для логов. - Добавить метод сбора добычи. **Результат.** Лут анализируется после боя."
Загрузка сохранения,"**Описание.** `SaveRepository.load` читает JSON. **Шаги реализации:** - Использовать `json.load` с обработкой ошибок. - Возвращать словарь данных и версию. - Логировать проблемы чтения. **Результат.** Прогресс загружается в память."
Сохранение прогресса,"**Описание.** `SaveRepository.save` пишет файл. **Шаги реализации:** - Сохранять данные через `json.dump` с отступами. - Создавать каталоги при необходимости. - Возвращать путь к сохранению. **Результат.** Прогресс игрока фиксируется на диске."
Резервное копирование,"**Описание.** `SaveRepository.backup` страхует данные. **Шаги реализации:** - Создавать копию с отметкой времени. - Копировать содержимое текущего сохранения. - Ограничивать количество резервов. **Результат.** Игрок защищён от потери прогресса."
Загрузка библиотеки квестов,"**Описание.** `QuestLoader.load_all` читает файл. **Шаги реализации:** - Открывать `Settings.QUEST_LIBRARY`. - Валидировать структуру через `validate_schema`. - Создавать объекты `Quest`. **Результат.** Квесты доступны сервисному слою."
Проверка структуры квестов,"**Описание.** `validate_schema` выявляет ошибки. **Шаги реализации:** - Проверять обязательные поля и типы. - Собирать отчёт о нарушениях. - Бросать исключение или возвращать список ошибок. **Результат.** Некорректные файлы обнаруживаются заранее."
Старт новой игры,"**Описание.** `GameService.start_new_game` подготавливает прогресс. **Шаги реализации:** - Сбрасывать мир и задавать имя игрока. - Загружать стартовые квесты и инвентарь. - Добавлять запись в журнал событий. **Результат.** Новая игра готова к началу приключения."
Добавление предметов игроку,"**Описание.** `GameService.add_item_to_player` управляет наградами. **Шаги реализации:** - Добавлять предмет в инвентарь через `player.add_item`. - Обрабатывать переполнение. - Фиксировать событие в `log`. **Результат.** Игрок получает предметы с сообщениями."
Формирование сводки,"**Описание.** `GameService.build_summary` собирает отчёт. **Шаги реализации:** - Скомпоновать характеристики игрока и активный квест. - Добавить последние события из журнала. - Вернуть форматированную строку. **Результат.** Сервис предоставляет краткий обзор состояния."
Отображение сводки в UI,"**Описание.** `ConsoleInterface.display_summary` выводит итог. **Шаги реализации:** - Вызывать `build_summary` и печатать результат. - Добавить разделители и подсказки. - Сообщить, что функциональность появится позже. **Результат.** Пользователь видит сводку после запуска."
